name: Comment PR artifacts links

on:
  workflow_run:
    workflows: ['Perform checks']
    types: [completed]

jobs:
  pr_comment:
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.JOB_TIMEOUT) }}
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const run_id = ${{github.event.workflow_run.id}};
            const pull_head_sha = '${{github.event.workflow_run.head_sha}}';

            const issue_number = await (async () => {
              const pulls = await github.rest.pulls.list({owner, repo});
              for await (const {data} of github.paginate.iterator(pulls)) {
                for (const pull of data) {
                  if (pull.head.sha === pull_head_sha) {
                    return pull.number;
                  }
                }
              }
            })();
            if (issue_number) {
              core.info(`Using pull request ${issue_number}`);
            } else {
              return core.error(`No matching pull request found`);
            }

            const {data: {artifacts}} = await github.rest.actions.listWorkflowRunArtifacts({owner, repo, run_id});
            if (!artifacts.length) {
              return core.error(`No artifacts found`);
            }
            let body = `Download the artifacts for this pull request:\n`;
            let hidden_gtk_artifacts = `\n\n <details><summary>Old GUI (GTK3)</summary>\n`;
            let hidden_headless_artifacts = `\n\n <details><summary>GUI-less (SDL2)</summary>\n`;
            let hidden_debug_artifacts = `\n\n <details><summary>Only for Developers</summary>\n`;
            for (const art of artifacts) {
              if(art.name.includes('Debug')) {
                hidden_debug_artifacts += `\n* [${art.name}](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
              } else if(art.name.includes('gtk-ryujinx')) {
                hidden_gtk_artifacts += `\n* [${art.name}](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
              } else if(art.name.includes('sdl2-ryujinx-headless')) {
                hidden_headless_artifacts += `\n* [${art.name}](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
              } else {
                body += `\n* [${art.name}](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
              }
            }
            hidden_gtk_artifacts += `\n</details>`;
            hidden_headless_artifacts += `\n</details>`;
            hidden_debug_artifacts += `\n</details>`;
            body += hidden_gtk_artifacts;
            body += hidden_headless_artifacts;
            body += hidden_debug_artifacts;

            const {data: comments} = await github.rest.issues.listComments({repo, owner, issue_number});
            const existing_comment = comments.find((c) => c.user.login === 'github-actions[bot]');
            if (existing_comment) {
              core.info(`Updating comment ${existing_comment.id}`);
              await github.rest.issues.updateComment({repo, owner, comment_id: existing_comment.id, body});
            } else {
              core.info(`Creating a comment`);
              await github.rest.issues.createComment({repo, owner, issue_number, body});
            }